
from typing import Any
from explorer.models import *

import json

class Serialize:
    """
    The board representation generated by the read_.* functions is inherently a
    graph.
    Serialisation do not like graphs - they prefer trees.
    Take the board representation, flatten it while keeping references to other
    nodes.

    ```
    res = json.dumps(system, default=Serialize(system))
    ```
    """
    def __init__(self, system: System) -> None:
        self.sigmap = SignalMap(system)

    def __call__(self, obj) -> Any:
        if isinstance(obj, System):
            res = dict()
            res["boards"] = dict()
            for brd in obj.boards:
                res["boards"][brd.name] = brd
            res["nets"] = []
            for net in self.sigmap.nets.values():
                res["nets"] += [net]
            return res
        if isinstance(obj, Board):
            res = dict()
            res["name"] = obj.name
            res["refdes"] = obj.refdes
            res["components"] = dict()
            for com in obj.components:
                res["components"][com.refdes] = com
            res["signals"] = dict()
            for sig in obj.signals:
                res["signals"][sig.name] = sig
            res["interfaces"] = dict()
            for iface in obj.interfaces:
                res["interfaces"][iface.name] = iface
            return res
        if isinstance(obj, Component):
            res = dict()
            res["refdes"] = obj.refdes
            res["pins"] = {}
            for pin in obj._outer_pins:
                res["pins"][pin] = obj._outer_pins[pin]
            return res
        if isinstance(obj, OuterPin):
            res = dict()
            res["name"] = obj.name
            res["signal"] = self.serialize_ref(obj.signal)
            res["interfaces"] = []
            for iface in obj.interfaces:
                res["interfaces"] += [self.serialize_ref(iface)]
            return res
        if isinstance(obj, Signal):
            res = dict()
            res["name"] = obj.name
            res["net"] = self.serialize_ref(self.sigmap.resolved_net(obj))
            res["pins"] = []
            for pin in obj._pins:
                if isinstance(pin, OuterPin) is False:
                    continue
                res["pins"] += [self.serialize_ref(pin)]
            return res
        if isinstance(obj, Net):
            res = dict()
            res["id"] = obj.net_number
            res["signals"] = []
            for signal in obj._signals:
                res["signals"] += [self.serialize_ref(signal)]
            return res
        if isinstance(obj, Interface):
            res = dict()
            res["other"] = self.serialize_ref(obj.other)
            res["pins"] = []
            for pin in obj._pins:
                res["pins"] += [self.serialize_ref(pin)]
            return res

    def serialize_ref(self, obj) -> Any:
        if isinstance(obj, Signal):
            res = dict()
            res["board"] = obj.parent.name
            res["signal"] = obj.name
            return res
        if isinstance(obj, OuterPin):
            res = dict()
            res["board"] = obj.parent.parent.name
            res["component"] = obj.parent.refdes
            res["pin"] = obj.name
            return res
        if isinstance(obj, Interface):
            res = dict()
            res["board"] = obj.parent.name
            res["interface"] = obj.name
            return res
        if isinstance(obj, Net):
            return obj.net_number

def write_json(system: System, file: str):

    with open(file, "w") as f:
        f.write(json.dumps(system, indent=4, default=Serialize(system)))
